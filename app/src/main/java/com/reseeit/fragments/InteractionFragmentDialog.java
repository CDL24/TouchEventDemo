package com.reseeit.fragments;import android.app.Dialog;import android.content.Intent;import android.content.pm.ActivityInfo;import android.content.res.Configuration;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.AsyncTask;import android.os.Bundle;import android.os.Environment;import android.support.v4.app.DialogFragment;import android.support.v4.app.FragmentTransaction;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.webkit.WebView;import android.widget.ImageView;import android.widget.Toast;import com.android.tedcoder.wkvideoplayer.dlna.engine.DLNAContainer;import com.android.tedcoder.wkvideoplayer.dlna.service.DLNAService;import com.android.tedcoder.wkvideoplayer.util.DensityUtil;import com.android.tedcoder.wkvideoplayer.view.MediaController;import com.android.tedcoder.wkvideoplayer.view.SuperVideoPlayer;import com.android.volley.toolbox.ImageLoader;import com.github.axet.vget.VGet;import com.github.axet.vget.info.VGetParser;import com.github.axet.vget.info.VideoFileInfo;import com.github.axet.vget.info.VideoInfo;import com.github.axet.vget.vhs.VimeoInfo;import com.github.axet.vget.vhs.YouTubeInfo;import com.github.axet.wget.info.DownloadInfo;import com.google.android.youtube.player.YouTubeInitializationResult;import com.google.android.youtube.player.YouTubePlayer;import com.google.android.youtube.player.YouTubePlayerSupportFragment;import com.reseeit.MainActivity;import com.reseeit.R;import com.reseeit.ReSeeItApp;import com.reseeit.com.reseeit.listeners.InteractionSeenListener;import com.reseeit.models.Interaction;import com.reseeit.util.Config;import com.reseeit.util.InteractionType;import org.apache.commons.lang3.StringUtils;import java.io.File;import java.net.URL;import java.util.List;import java.util.concurrent.atomic.AtomicBoolean;import static com.google.android.youtube.player.YouTubePlayer.*;public class InteractionFragmentDialog extends DialogFragment {    private String couponId;    private Interaction interaction;    private InteractionSeenListener mInteractionListener;    private View mView;    private ImageView imgCoupon;    private WebView wvHelp;    String videoURL;    VideoInfo videoinfo;    String finalUrl = "";    long last;    boolean defaultVideo = false;    String ID;    private YouTubePlayerSupportFragment youTubePlayerFragment;    public InteractionFragmentDialog(Interaction interaction, InteractionSeenListener mInteractionListener, String couponId) {        this.interaction = interaction;        this.mInteractionListener = mInteractionListener;        this.couponId = couponId;    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle            savedInstanceState) {        mView = inflater.inflate(R.layout.frg_interaction_dialog, null);        return mView;    }    @Override    public Dialog onCreateDialog(Bundle savedInstanceState) {        Dialog dialog = super.onCreateDialog(savedInstanceState);        dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        dialog.getWindow().requestFeature(Window.FEATURE_NO_TITLE);        return dialog;    }    public InteractionFragmentDialog() {    }    @Override    public void onActivityCreated(Bundle savedInstanceState) {        super.onActivityCreated(savedInstanceState);        youTubePlayerFragment = YouTubePlayerSupportFragment.newInstance();        imgCoupon = (ImageView) mView.findViewById(R.id.img_interaction);        wvHelp = (WebView) mView.findViewById(R.id.web_view_interaction);//        videoView = (VideoView) mView.findViewById(R.id.video_view_interaction);        if (!interaction.Type.equals("default")) {            if (interaction.link_to_interaction_type.equals(InteractionType.TYPE_IMAGE)) {                imgCoupon.setVisibility(View.VISIBLE);                wvHelp.setVisibility(View.GONE);                ImageLoader imgLoader = ReSeeItApp.getInstance().getImageLoader();                imgLoader.get(interaction.link_to_interaction, ImageLoader.getImageListener(imgCoupon, R.drawable.coupon_place_holder, R.drawable.coupon_place_holder));                mInteractionListener.onInteractionSeen(interaction, couponId);            } else if (interaction.link_to_interaction_type.equals(InteractionType.TYPE_VIDEO)) {                imgCoupon.setVisibility(View.GONE);                wvHelp.setVisibility(View.GONE);                videoURL = interaction.link_to_interaction;                defaultVideo = false;                String[] strings = videoURL.split("=");                ID = strings[1];                playVideo();            } else {                imgCoupon.setVisibility(View.GONE);                wvHelp.setVisibility(View.VISIBLE);                wvHelp.loadUrl(interaction.link_to_interaction);                mInteractionListener.onInteractionSeen(interaction, couponId);            }        } else {            if (interaction.default_interaction_type.equals(InteractionType.TYPE_IMAGE)) {                imgCoupon.setVisibility(View.VISIBLE);                wvHelp.setVisibility(View.GONE);                ImageLoader imgLoader = ReSeeItApp.getInstance().getImageLoader();                imgLoader.get(interaction.default_interaction, ImageLoader.getImageListener(imgCoupon, R.drawable.coupon_place_holder, R.drawable.coupon_place_holder));                mInteractionListener.onInteractionSeen(interaction, couponId);            } else if (interaction.default_interaction_type.equals(InteractionType.TYPE_VIDEO)) {                imgCoupon.setVisibility(View.GONE);                wvHelp.setVisibility(View.GONE);                videoURL = interaction.default_interaction;                defaultVideo = true;                String[] strings = videoURL.split("=");                ID = strings[1];                playVideo();            } else {                imgCoupon.setVisibility(View.GONE);                wvHelp.setVisibility(View.VISIBLE);                wvHelp.loadUrl(interaction.default_interaction);                mInteractionListener.onInteractionSeen(interaction, couponId);            }        }    }    private void playVideo() {        FragmentTransaction transaction = getChildFragmentManager().beginTransaction();        transaction.add(R.id.videoSurfaceContainer, youTubePlayerFragment).commit();        youTubePlayerFragment.initialize(Config.YOUTUBE_API_KEY, new OnInitializedListener() {            @Override            public void onInitializationSuccess(Provider provider, YouTubePlayer player, boolean wasRestored) {                if (!wasRestored) {                    player.setPlayerStyle(PlayerStyle.CHROMELESS);                    player.loadVideo(ID);                    player.play();                }                player.setPlayerStateChangeListener(new PlayerStateChangeListener() {                    @Override                    public void onLoading() {                    }                    @Override                    public void onLoaded(String s) {                    }                    @Override                    public void onAdStarted() {                    }                    @Override                    public void onVideoStarted() {                    }                    @Override                    public void onVideoEnded() {                        if (!defaultVideo) {                            mInteractionListener.onInteractionSeen(interaction, couponId);                            ((MainActivity) getActivity()).mRedeemModel(Integer.parseInt(interaction.award_points));                        }                        InteractionFragmentDialog.this.dismiss();                    }                    @Override                    public void onError(ErrorReason errorReason) {                    }                });            }            @Override            public void onInitializationFailure(Provider provider, YouTubeInitializationResult error) {                // YouTube error                String errorMessage = error.toString();                Toast.makeText(getActivity(), errorMessage, Toast.LENGTH_LONG).show();                Log.d("errorMessage:", errorMessage);            }        });    }//    Target mTarget = new Target() {//        @Override//        public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom loadedFrom) {//            imgCoupon.setImageBitmap(bitmap);//            mInteractionListener.onInteractionSeen(interaction, couponId);//        }////        @Override//        public void onBitmapFailed(Drawable drawable) {////        }////        @Override//        public void onPrepareLoad(Drawable drawable) {////        }//    };}